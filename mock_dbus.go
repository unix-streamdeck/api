// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/godbus/dbus/v5 (interfaces: BusObject)

// Package mocks is a generated GoMock package.
package api

import (
    context "context"
    reflect "reflect"

    dbus "github.com/godbus/dbus/v5"
    gomock "github.com/golang/mock/gomock"
)

// MockBusObject is a mock of BusObject interface.
type MockBusObject struct {
    ctrl     *gomock.Controller
    recorder *MockBusObjectMockRecorder
}

// MockBusObjectMockRecorder is the mock recorder for MockBusObject.
type MockBusObjectMockRecorder struct {
    mock *MockBusObject
}

// NewMockBusObject creates a new mock instance.
func NewMockBusObject(ctrl *gomock.Controller) *MockBusObject {
    mock := &MockBusObject{ctrl: ctrl}
    mock.recorder = &MockBusObjectMockRecorder{mock}
    return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBusObject) EXPECT() *MockBusObjectMockRecorder {
    return m.recorder
}

// AddMatchSignal mocks base method.
func (m *MockBusObject) AddMatchSignal(arg0, arg1 string, arg2 ...dbus.MatchOption) *dbus.Call {
    m.ctrl.T.Helper()
    varargs := []interface{}{arg0, arg1}
    for _, a := range arg2 {
        varargs = append(varargs, a)
    }
    ret := m.ctrl.Call(m, "AddMatchSignal", varargs...)
    ret0, _ := ret[0].(*dbus.Call)
    return ret0
}

// AddMatchSignal indicates an expected call of AddMatchSignal.
func (mr *MockBusObjectMockRecorder) AddMatchSignal(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
    mr.mock.ctrl.T.Helper()
    varargs := append([]interface{}{arg0, arg1}, arg2...)
    return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMatchSignal", reflect.TypeOf((*MockBusObject)(nil).AddMatchSignal), varargs...)
}

// Call mocks base method.
func (m *MockBusObject) Call(arg0 string, arg1 dbus.Flags, arg2 ...interface{}) *dbus.Call {
    m.ctrl.T.Helper()
    varargs := []interface{}{arg0, arg1}
    for _, a := range arg2 {
        varargs = append(varargs, a)
    }
    ret := m.ctrl.Call(m, "Call", varargs...)
    ret0, _ := ret[0].(*dbus.Call)
    return ret0
}

// Call indicates an expected call of Call.
func (mr *MockBusObjectMockRecorder) Call(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
    mr.mock.ctrl.T.Helper()
    varargs := append([]interface{}{arg0, arg1}, arg2...)
    return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockBusObject)(nil).Call), varargs...)
}

// CallWithContext mocks base method.
func (m *MockBusObject) CallWithContext(arg0 context.Context, arg1 string, arg2 dbus.Flags, arg3 ...interface{}) *dbus.Call {
    m.ctrl.T.Helper()
    varargs := []interface{}{arg0, arg1, arg2}
    for _, a := range arg3 {
        varargs = append(varargs, a)
    }
    ret := m.ctrl.Call(m, "CallWithContext", varargs...)
    ret0, _ := ret[0].(*dbus.Call)
    return ret0
}

// CallWithContext indicates an expected call of CallWithContext.
func (mr *MockBusObjectMockRecorder) CallWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
    mr.mock.ctrl.T.Helper()
    varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
    return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallWithContext", reflect.TypeOf((*MockBusObject)(nil).CallWithContext), varargs...)
}

// Destination mocks base method.
func (m *MockBusObject) Destination() string {
    m.ctrl.T.Helper()
    ret := m.ctrl.Call(m, "Destination")
    ret0, _ := ret[0].(string)
    return ret0
}

// Destination indicates an expected call of Destination.
func (mr *MockBusObjectMockRecorder) Destination() *gomock.Call {
    mr.mock.ctrl.T.Helper()
    return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destination", reflect.TypeOf((*MockBusObject)(nil).Destination))
}

// GetProperty mocks base method.
func (m *MockBusObject) GetProperty(arg0 string) (dbus.Variant, error) {
    m.ctrl.T.Helper()
    ret := m.ctrl.Call(m, "GetProperty", arg0)
    ret0, _ := ret[0].(dbus.Variant)
    ret1, _ := ret[1].(error)
    return ret0, ret1
}

// GetProperty indicates an expected call of GetProperty.
func (mr *MockBusObjectMockRecorder) GetProperty(arg0 interface{}) *gomock.Call {
    mr.mock.ctrl.T.Helper()
    return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProperty", reflect.TypeOf((*MockBusObject)(nil).GetProperty), arg0)
}

// Go mocks base method.
func (m *MockBusObject) Go(arg0 string, arg1 dbus.Flags, arg2 chan *dbus.Call, arg3 ...interface{}) *dbus.Call {
    m.ctrl.T.Helper()
    varargs := []interface{}{arg0, arg1, arg2}
    for _, a := range arg3 {
        varargs = append(varargs, a)
    }
    ret := m.ctrl.Call(m, "Go", varargs...)
    ret0, _ := ret[0].(*dbus.Call)
    return ret0
}

// Go indicates an expected call of Go.
func (mr *MockBusObjectMockRecorder) Go(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
    mr.mock.ctrl.T.Helper()
    varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
    return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Go", reflect.TypeOf((*MockBusObject)(nil).Go), varargs...)
}

// GoWithContext mocks base method.
func (m *MockBusObject) GoWithContext(arg0 context.Context, arg1 string, arg2 dbus.Flags, arg3 chan *dbus.Call, arg4 ...interface{}) *dbus.Call {
    m.ctrl.T.Helper()
    varargs := []interface{}{arg0, arg1, arg2, arg3}
    for _, a := range arg4 {
        varargs = append(varargs, a)
    }
    ret := m.ctrl.Call(m, "GoWithContext", varargs...)
    ret0, _ := ret[0].(*dbus.Call)
    return ret0
}

// GoWithContext indicates an expected call of GoWithContext.
func (mr *MockBusObjectMockRecorder) GoWithContext(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
    mr.mock.ctrl.T.Helper()
    varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
    return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GoWithContext", reflect.TypeOf((*MockBusObject)(nil).GoWithContext), varargs...)
}

// Path mocks base method.
func (m *MockBusObject) Path() dbus.ObjectPath {
    m.ctrl.T.Helper()
    ret := m.ctrl.Call(m, "Path")
    ret0, _ := ret[0].(dbus.ObjectPath)
    return ret0
}

// Path indicates an expected call of Path.
func (mr *MockBusObjectMockRecorder) Path() *gomock.Call {
    mr.mock.ctrl.T.Helper()
    return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockBusObject)(nil).Path))
}

// RemoveMatchSignal mocks base method.
func (m *MockBusObject) RemoveMatchSignal(arg0, arg1 string, arg2 ...dbus.MatchOption) *dbus.Call {
    m.ctrl.T.Helper()
    varargs := []interface{}{arg0, arg1}
    for _, a := range arg2 {
        varargs = append(varargs, a)
    }
    ret := m.ctrl.Call(m, "RemoveMatchSignal", varargs...)
    ret0, _ := ret[0].(*dbus.Call)
    return ret0
}

// RemoveMatchSignal indicates an expected call of RemoveMatchSignal.
func (mr *MockBusObjectMockRecorder) RemoveMatchSignal(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
    mr.mock.ctrl.T.Helper()
    varargs := append([]interface{}{arg0, arg1}, arg2...)
    return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMatchSignal", reflect.TypeOf((*MockBusObject)(nil).RemoveMatchSignal), varargs...)
}

// SetProperty mocks base method.
func (m *MockBusObject) SetProperty(arg0 string, arg1 interface{}) error {
    m.ctrl.T.Helper()
    ret := m.ctrl.Call(m, "SetProperty", arg0, arg1)
    ret0, _ := ret[0].(error)
    return ret0
}

// SetProperty indicates an expected call of SetProperty.
func (mr *MockBusObjectMockRecorder) SetProperty(arg0, arg1 interface{}) *gomock.Call {
    mr.mock.ctrl.T.Helper()
    return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProperty", reflect.TypeOf((*MockBusObject)(nil).SetProperty), arg0, arg1)
}

// StoreProperty mocks base method.
func (m *MockBusObject) StoreProperty(arg0 string, arg1 interface{}) error {
    m.ctrl.T.Helper()
    ret := m.ctrl.Call(m, "StoreProperty", arg0, arg1)
    ret0, _ := ret[0].(error)
    return ret0
}

// StoreProperty indicates an expected call of StoreProperty.
func (mr *MockBusObjectMockRecorder) StoreProperty(arg0, arg1 interface{}) *gomock.Call {
    mr.mock.ctrl.T.Helper()
    return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreProperty", reflect.TypeOf((*MockBusObject)(nil).StoreProperty), arg0, arg1)
}
