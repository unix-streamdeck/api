// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	dbus "github.com/godbus/dbus/v5"
	mock "github.com/stretchr/testify/mock"
)

// IConn is an autogenerated mock type for the IConn type
type IConn struct {
	mock.Mock
	Sig chan <- *dbus.Signal
}

// AddMatchSignal provides a mock function with given fields: options
func (_m *IConn) AddMatchSignal(options ...dbus.MatchOption) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...dbus.MatchOption) error); ok {
		r0 = rf(options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *IConn) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Signal provides a mock function with given fields: ch
func (_m *IConn) Signal(ch chan<- *dbus.Signal) {
	_m.Sig = ch
	_m.Called(ch)
}

type mockConstructorTestingTNewIConn interface {
	mock.TestingT
	Cleanup(func())
}

// NewIConn creates a new instance of IConn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIConn(t mockConstructorTestingTNewIConn) *IConn {
	mock := &IConn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
